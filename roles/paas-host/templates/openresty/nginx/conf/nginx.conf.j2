# FILE:             /usr/local/openresty/nginx/conf/nginx.conf

user  www-data;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    more_clear_headers Server;
    server_tokens off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # The "auto_ssl" shared dict should be defined with enough storage space to
    # hold your certificate data. 1MB of storage holds certificates for
    # approximately 100 separate domains.
    lua_shared_dict auto_ssl 1m;
    # The "auto_ssl_settings" shared dict is used to temporarily store various settings
    # like the secret used by the hook server on port 8999. Do not change or
    # omit it.
    lua_shared_dict auto_ssl_settings 64k;

    # A DNS resolver must be defined for OCSP stapling to function.
    #
    # This example uses Google's DNS server. You may want to use your system's
    # default DNS servers, which can be found in /etc/resolv.conf. If your network
    # is not IPv6 compatible, you may wish to disable IPv6 results by using the
    # "ipv6=off" flag (like "resolver 8.8.8.8 ipv6=off").
    resolver 8.8.8.8;

    # Initial setup tasks.
    init_by_lua_block {
      auto_ssl = (require "resty.auto-ssl").new()

      -- Define a function to determine which SNI domains to automatically handle
      -- and register new certificates for. Defaults to not allowing any domains,
      -- so this must be configured.
      auto_ssl:set("allow_domain", function(domain)
        return true
      end)

      auto_ssl:init()
    }

    init_worker_by_lua_block {
      auto_ssl:init_worker()
    }

    # HTTPS server
    server {
      listen 443 ssl;

      # Dynamic handler for issuing or returning certs for SNI domains.
      ssl_certificate_by_lua_block {
        auto_ssl:ssl_certificate()
      }

      # You must still define a static ssl_certificate file for nginx to start.
      #
      # You may generate a self-signed fallback with:
      #
      # openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 \
      #   -subj '/CN=sni-support-required-for-valid-ssl' \
      #   -keyout /etc/ssl/resty-auto-ssl-fallback.key \
      #   -out /etc/ssl/resty-auto-ssl-fallback.crt
      ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
      ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;
    }

    # HTTP server
    server {
      listen 80;

      # Endpoint used for performing domain verification with Let's Encrypt.
      location /.well-known/acme-challenge/ {
        content_by_lua_block {
          auto_ssl:challenge_server()
        }
      }
    }

    # Internal server running on port 8999 for handling certificate tasks.
    server {
      listen 127.0.0.1:8999;

      # Increase the body buffer size, to ensure the internal POSTs can always
      # parse the full POST contents into memory.
      client_body_buffer_size 128k;
      client_max_body_size 128k;

      location / {
        content_by_lua_block {
          auto_ssl:hook_server()
        }
      }
    }

    # Aqui repassamos *.app.etica.dev e *.nip.io para o Tsuru apps criados pelo usuario
    server {
        listen 443 ssl;
        server_name  *.{{ inventory_hostname }} *.nip.io;

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        # Dynamic handler for issuing or returning certs for SNI domains.
        ssl_certificate_by_lua_block {
          auto_ssl:ssl_certificate()
        }
        ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
        ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

        location / {
            add_header X-Served-By $hostname;
            proxy_ignore_client_abort on;
            proxy_set_header Host $host;
            proxy_pass   http://127.0.0.1:82;
        }
    }

    # Minio
    # https://docs.min.io/docs/setup-nginx-proxy-with-minio.html
    server {
        listen 443 ssl;
        server_name  {{ minio_domain }};

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        # Dynamic handler for issuing or returning certs for SNI domains.
        ssl_certificate_by_lua_block {
          auto_ssl:ssl_certificate()
        }
        ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
        ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

        ## @see # https://docs.min.io/docs/setup-nginx-proxy-with-minio.html
        # To allow special characters in headers
        ignore_invalid_headers off;
        # Allow any size file to be uploaded.  
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering

        location / {
            add_header X-Served-By $hostname;
            proxy_ignore_client_abort on;
            proxy_set_header Host $host;
            
            proxy_pass   http://{{ minio_ip_port }};
            # health_check uri=/minio/health/ready;
            # healt check é apenas NGinx Plus? Humm
            # health_check uri=/some/path;
            # health_check interval=10 fails=3 passes=2;
        }
    }

    # Aqui repassamos *.nip.io para o Tsuru apps criados pelo usuario
    # Note que dominios *.dev nem tem como ser acessados via HTTP comum
    server {
        listen 80;
        server_name *.nip.io;

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        location / {
            add_header X-Served-By $hostname;
            proxy_ignore_client_abort on;
            proxy_set_header Host $host;
            proxy_pass   http://127.0.0.1:82;
        }
    }

    # Configuração que estava antes no NGinx
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
